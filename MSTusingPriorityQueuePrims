package Graph;

import java.util.*;
class Nodes implements Comparator<Nodes>{
    int v;
    int weight;
    Nodes(int v, int weight){
        this.v = v;
        this.weight = weight;
    }

    Nodes () {}

    int getV(){
        return v;
    }
    int getWeight(){
        return weight;
    }

    @Override
    public int compare(Nodes node1,Nodes node2){

        if(node1.weight<node2.weight){
            return -1;
        }
        if(node1.weight>node2.weight){
            return 1;
        }
        return 0;
    }
}
public class MSTusingPriorityQueuePrims {
    public static void mST(int source,ArrayList<ArrayList<Nodes>> adj,int V){

        int weight[] = new int[V];
        int parent[] = new int[V];
        boolean visited[] = new boolean[V];

        for(int i=0;i<V;i++){
            weight[i]=10000000;
            visited[i]=false;
            parent[i]=-1;
        }

        PriorityQueue<Nodes> pq = new PriorityQueue<>(V, new Nodes());

        weight[0]=0;
        pq.add(new Nodes(source,0));

        for (int i=0;i<V-1;i++){
            int u = pq.poll().getV();
            visited[u]=true;
            for(Nodes curr : adj.get(u)){
                if( visited[curr.getV()]==false && curr.getWeight()<weight[curr.getV()]){
                    parent[curr.getV()]=u;
                    weight[curr.getV()]=curr.getWeight();
                    pq.add(new Nodes(curr.getV(), weight[curr.getV()]));
                }
            }
        }

        int sum=0;
        for(int i=0;i<V;i++){
            sum+=weight[i];
        }
        System.out.println(sum);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while(T!=0){
            int V = sc.nextInt();
            int E = sc.nextInt();

            ArrayList<ArrayList<Nodes>> adj = new ArrayList<>();
            for(int i=0;i<V;i++){
                adj.add(new ArrayList<Nodes>());
            }

            for(int i=0;i<E;i++){
                int u = sc.nextInt();
                int v = sc.nextInt();
                int w = sc.nextInt();
                adj.get(u).add(new Nodes(v,w));
                adj.get(v).add(new Nodes(u,w));
            }

            int source = 0;
            mST(source,adj,V);
            T--;
        }
    }
}
