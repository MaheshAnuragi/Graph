package Graph;
import java.util.*;

class Node implements Comparator<Node>{
    int v;
    int weight;
    Node(int v, int weight){
        this.v = v;
        this.weight = weight;
    }

    Node () {}

    int getV(){
        return v;
    }
    int getWeight(){
        return weight;
    }

    @Override
    public int compare(Node node1,Node node2){

        if(node1.weight<node2.weight){
            return -1;
        }
        if(node1.weight>node2.weight){
            return 1;
        }
        return 0;
    }
}

public class Dijkstras {

    public static void shortestPath(int source, ArrayList<ArrayList<Node>> adj, int V){

        int dist[] = new int[V];
        Arrays.fill(dist,100000000);
        dist[source]=0;

        PriorityQueue<Node> pq = new PriorityQueue<>(V,new Node());
        pq.add(new Node(source,0));

        while (!pq.isEmpty()){
            Node node = pq.poll();
            for(Node curr : adj.get(node.getV())){
                if(dist[node.getV()]+curr.getWeight()<dist[curr.getV()]){
                    dist[curr.getV()]=dist[node.getV()]+curr.getWeight();
                    pq.add(new Node(curr.getV(),dist[curr.getV()]));
                }
            }
        }

        for (int i=1;i<V;i++){
            System.out.print(dist[i]+" ");
        }

    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while(T!=0){
            int V = sc.nextInt();
            int E = sc.nextInt();

            ArrayList<ArrayList<Node>> adj = new ArrayList<>();
            for(int i=0;i<V;i++){
                adj.add(new ArrayList<Node>());
            }

            for(int i=0;i<E;i++){
                int u = sc.nextInt()-1;
                int v = sc.nextInt()-1;
                int w = sc.nextInt();
                adj.get(u).add(new Node(v,w));
                adj.get(v).add(new Node(u,w));
            }

            int source = sc.nextInt()-1;
            shortestPath(source,adj,V);
            T--;
        }

    }

}
